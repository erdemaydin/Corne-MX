/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/42.h"
#include <dt-bindings/zmk/bt.h>

#define ___ &trans

#define BSE 0   //base
#define LWR 1   //lower
#define RSE 2   //raise
#define ADJ 3   //bt-adjust

#define QUICK_TAP_MS 175

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2

ZMK_HOLD_TAP(hml,
    flavor = "tap-preferred";
    tapping-term-ms = <280>;
    quick-tap-ms = <220>;
    require-prior-idle-ms = <250>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;
    bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(hmr,
    flavor = "tap-preferred";
    tapping-term-ms = <280>;
    quick-tap-ms = <220>;
    require-prior-idle-ms = <250>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;
    bindings = <&kp>, <&kp>;
)

ZMK_CONDITIONAL_LAYER(ADJ, LWR RSE, ADJ)

ZMK_COMBO(ij_project_files,         &kp LG(NUMBER_1),     RB0 RB1, BSE)
ZMK_COMBO(ij_selected_task_run,     &kp LS(LC(F10)),      LT0 LT1, BSE)
ZMK_COMBO(ij_last_run_task_run,     &kp LS(F10),          LM0 LM1, BSE)
ZMK_COMBO(ij_stop_running_task,     &kp LG(F2),           LT2 LT3, BSE)

ZMK_LAYER(base,
&kp TAB    &kp Q          &kp W         &kp E        &kp R        &kp T      &kp Y      &kp U        &kp I        &kp O         &kp P            &kp BSPC
&kp LCTRL  &hml LSHIFT A  &hml LCTRL S  &hml LALT D  &hml LCMD F  &kp G      &kp H      &hmr RCMD J  &hmr RALT K  &hmr RCTRL L  &hmr RSHFT SEMI  &kp SQT
&kp LSHFT  &kp Z          &kp X         &kp C        &kp V        &kp B      &kp N      &kp M        &kp COMMA    &kp DOT       &kp FSLH         &mt RIGHT_SHIFT ESCAPE
                                        &kp LGUI     &mo LWR        &kp RET    &kp SPACE  &mo RSE        &kp RALT
)

ZMK_LAYER(lower_layer,
&kp ESCAPE  &kp N1           &kp N2  &kp N3    &kp N4    &kp N5       &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &trans
&trans      &kp N6           &kp N7  &kp N8    &kp N9    &kp N0       &kp LBKT   &kp RBKT   &kp LBRC   &kp RBRC  &kp BSLH  &kp GRAVE
&trans      &kp EXCLAMATION  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp MINUS  &kp EQUAL  &kp UNDER  &kp PLUS  &kp PIPE  &kp TILDE
                                     &kp LGUI  &trans    &kp RET      &kp SPACE  &trans     &kp RALT
)

ZMK_LAYER(raise_layer,
&kp C_AL_LOCK  &kp LG(LS(GRAVE))  &kp F1  &kp F2    &kp F3   &kp F4     &kp PAGE_UP    &kp LA(LEFT_ARROW)  &kp UP_ARROW    &kp LA(RIGHT_ARROW)  &kp LG(BACKSPACE)  &trans
&kp GLOBE      &kp LC(RIGHT)      &kp F5  &kp F6    &kp F7   &kp F8     &kp PAGE_DOWN  &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT_ARROW      &kp DELETE         &kp RCTRL
&trans         &none              &kp F9  &kp F10   &kp F11  &kp F12    &kp HOME       &kp END             &kp LG(TILDE)   &kp LG(GRAVE)        &kp CAPSLOCK       &trans
                                          &kp LGUI  &trans   &kp RET    &kp SPACE      &trans              &kp RALT
)

ZMK_LAYER(adjust_layer,
&none           &none         &none         &none         &none         &studio_unlock    &kp C_VOLUME_UP    &kp C_BRI_UP   &none     &none  &none   &trans
&bt BT_CLR      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &kp C_VOLUME_DOWN  &kp C_BRI_DEC  &none     &none  &none   &trans
&bt BT_CLR_ALL  &trans        &trans        &trans        &bt BT_PRV    &bt BT_NXT        &caps_word         &none          &none     &none  &trans  &trans
                                            &kp LGUI      &trans        &kp RET           &kp SPACE          &trans         &kp RALT
)
