/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <20 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            flavor = "tap-preferred";
            quick-tap-ms = <220>;
            hold-trigger-on-release;
            require-prior-idle-ms = <250>;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            quick-tap-ms = <220>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            require-prior-idle-ms = <250>;
        };
    };

    combos {
        compatible = "zmk,combos";

        ij_selected_task_run {
            bindings = <&kp LS(LC(F10))>;
            key-positions = <5 4>;
            layers = <0>;
        };

        ij_last_run_task_run {
            bindings = <&kp LS(F10)>;
            key-positions = <16 17>;
            layers = <0>;
        };

        ij_stop_running_task {
            bindings = <&kp LG(F2)>;
            key-positions = <2 3>;
            layers = <0>;
        };

        ij_project_files {
            bindings = <&kp LG(NUMBER_1)>;
            key-positions = <28 29>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | ENT |   | SPC | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q          &kp W         &kp E        &kp R        &kp T      &kp Y      &kp U        &kp I        &kp O         &kp P            &kp BSPC
&kp LCTRL  &hml LSHIFT A  &hml LCTRL S  &hml LALT D  &hml LCMD F  &kp G      &kp H      &hmr RCMD J  &hmr RALT K  &hmr RCTRL L  &hmr RSHFT SEMI  &kp SQT
&kp LSHFT  &kp Z          &kp X         &kp C        &kp V        &kp B      &kp N      &kp M        &kp COMMA    &kp DOT       &kp FSLH         &mt RIGHT_SHIFT ESCAPE
                                        &kp LGUI     &mo 1        &kp RET    &kp SPACE  &mo 2        &kp RALT
            >;
        };

        lower {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | ENT |   | SPC |     | ALT |

            bindings = <
&kp ESCAPE  &kp N1           &kp N2  &kp N3    &kp N4    &kp N5       &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &trans
&trans      &kp N6           &kp N7  &kp N8    &kp N9    &kp N0       &kp LBKT   &kp RBKT   &kp LBRC   &kp RBRC  &kp BSLH  &kp GRAVE
&trans      &kp EXCLAMATION  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp MINUS  &kp EQUAL  &kp UNDER  &kp PLUS  &kp PIPE  &kp TILDE
                                     &kp LGUI  &trans    &kp RET      &kp SPACE  &trans     &kp RALT
            >;
        };

        raise {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   |     |     |  UP |     |     |      |
            // | SHFT |     |     |     |     |     |   |     | LFT | DWN | RGT |     |      |
            //                    | GUI |     | ENT |   | SPC |     | ALT |

            bindings = <
&kp C_AL_LOCK  &kp LG(LS(GRAVE))  &kp F1  &kp F2    &kp F3   &kp F4     &kp PAGE_UP    &kp LA(LEFT_ARROW)  &kp UP_ARROW    &kp LA(RIGHT_ARROW)  &kp LG(BACKSPACE)  &trans
&kp GLOBE      &kp LC(RIGHT)      &kp F5  &kp F6    &kp F7   &kp F8     &kp PAGE_DOWN  &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT_ARROW      &kp DELETE         &kp RCTRL
&trans         &none              &kp F9  &kp F10   &kp F11  &kp F12    &kp HOME       &kp END             &kp LG(TILDE)   &kp LG(GRAVE)        &kp CAPSLOCK       &trans
                                          &kp LGUI  &trans   &kp RET    &kp SPACE      &trans              &kp RALT
            >;
        };

        adjust {
            bindings = <
&none           &none         &none         &none         &none         &studio_unlock    &kp C_VOLUME_UP    &kp C_BRI_UP   &none     &none  &none   &trans
&bt BT_CLR      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &kp C_VOLUME_DOWN  &kp C_BRI_DEC  &none     &none  &none   &trans
&bt BT_CLR_ALL  &trans        &trans        &trans        &bt BT_PRV    &bt BT_NXT        &caps_word         &none          &none     &none  &trans  &trans
                                            &kp LGUI      &trans        &kp RET           &kp SPACE          &trans         &kp RALT
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
